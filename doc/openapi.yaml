openapi: "3.0.2"

info:
  title: Friend Finder
  version: '1.0'
  description: "L'API de FriendFinder est une API REST. Elle a des URL orientées ressources, elle renvoie des données codées en JSON, elle utilise les codes de réponses standards HTTP, et une authentification."

  #termsOfService: "https://openweathermap.org/terms"
  license:
    name: "Repo Git"
    url: "https://github.com/EnseirbTelecom/pg219-2020-dark-heroes/tree/master/doc"

servers:
  - url: https://localhost:3000

security:
  - friendFinder_auth: []

tags:
  - name: "Utilisateur"
    description: "Requêtes sur l'utilisateur."

  - name: "Amis"
    description: "Relations et intéractions avec les amis d'un utilisateur. "

  - name: "Position"
    description: "Positions courantes et historique des positions des utilisateurs."

  - name: "Connexion"
    description: "Etat de connexion des utilisateurs"

components:

  securitySchemes:
    friendFinder_auth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      description: "L'utilisateur doit s'identifier pour accéder aux requêtes."

  schemas:

    Hist_position:
      type: object
      properties:
        hist_lat:
          type: string
        hist_long:
          type: string
        hist_date:
          type: string
          format: date
        message:
          type: string


    Position:
      type: object
      properties:
        email:
          type: string
          format: email
        pseudo:
          type: string
        lat:
          type: string
        long:
          type: string
        date:
          type: string
          format: date
        duration:
          type: string
          minimum: 0
        message:
          type: string

    User:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        pseudo:
          type: string
        birthday:
          type: string
          format: date
        gender:
          type: string
        current_lat:
          type: string
        current_long:
          type: string
        activation_date:
          type: string
          format: date
        duration:
          type: number
          minimum: 0
        hist_positions:
          $ref: "#/components/schemas/Hist_position"
        friends:
          type: array
          items:
            type: string
        friend_request:
          type: array
          items:
            type: string
        friend_pending:
          type: array
          items:
            type: string



paths:

  /profile:
    get:
      tags:
        - Utilisateur
      summary: "Accéder à son profil"
      operationId: "getMyProfile"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  user:
                    $ref: "#/components/schemas/User"
        "404":
          description: "Utilisateur introuvable"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
                  status:
                    type: integer
                    example: 404
        "403":
          description: "Erreur d'autorisation"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "token not valid"
                  status:
                    type: integer
                    example: 403

  /delProfile:
    delete:
      tags:
        - Utilisateur
      operationId: "deleteMyProfile"
      summary: "Supprimer son profil"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  state:
                    type: string
                    example: "user deleted"


        "403":
          description: "Erreur d'autorisation"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "token not valid"
                  status:
                    type: integer
                    example: 403


  /settings:
    post:
      tags:
        - Utilisateur
      summary: "Changer de mot de passe"
      operationId: "changepassword"
      requestBody:
        description: "JSON contenant l'ancien et le nouveau mot de passe"
        required: true
        content:
          json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password

      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
        "403":
          description: "Erreur d'autorisation ou ancien mot de passe incorrect"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "token not valid"
                  status:
                    type: integer
                    example: 403

  /Users:
    post:
      tags:
        - Utilisateur
      summary: "Ajouter un utilisateur"
      description: ""
      operationId: "addUser"
      requestBody:
        description: "Structure de User de l'utilisateur à ajouter"
        required: true
        content:
          json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "Your account has been created."
                  status:
                    type: integer
                    example: 200

        "400":
          description: "Informations manquantes, ou pseudo/email déjà attribué."
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Please, fill in the form proprely."
                  status:
                    type: integer
                    example: 400


  /friends:
    get:
      tags:
        - Amis
      summary: "Accéder à la liste des amis"
      operationId: "getFriends"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  friendslist:
                    type: array
                    items:
                      type: string
                      example: Antoine Dubois, Sophie Martin, Fred Lanvin
                  status:
                    type: integer
                    example: 200
        "404":
          description: "Erreur"
        "403":
          description: "Erreur"

  /friendsrequests:
    get:
      tags:
        - Amis
      summary: "Accéder à la liste des demandes d'amis"
      operationId: "getFriendrequests"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  friendrequests:
                    type: array
                    items:
                      type: string
                      example: Antoine Dubois, Sophie Martin, Fred Lanvin
                  status:
                    type: integer
                    example: 200
        "404":
          description: "Erreur"
        "403":
          description: "Erreur"

  /delFriend:
    delete:
      tags:
        - Amis
      summary: "Supprimer un ami de la liste"
      operationId: "deletefriend"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "Jean Dupont has been removed."
                  status:
                    type: integer
                    example: 200
        "404":
          description: "Erreur"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Jean Dupont doesn't exist."
                  status:
                    type: integer
                    example: 404
        "403":
          description: "Erreur"

  /addFriend:
    post:
      tags:
        - Amis
      summary: "Ajouter un ami"
      operationId: "addFriend"
      requestBody:
        description: "Structure User de l'ami à ajouter"
        required: true
        content:
          json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "Friend request for Jean Dupont sent."
                  status:
                    type: integer
                    example: 200

        "400":
          description: "L'ami est déjà présent dans la liste"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Jean Dupont is already your friend."
                  status:
                    type: integer
                    example: 400
        "404":
          description: "L'utilisateur n'existe pas."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Jean Dupont doesn't exist."
                  status:
                    type: integer
                    example: 404
        "403":
          description: "Erreur"

  /friendRequestReply:
    post:
      tags:
        - Amis
      summary: "Répondre à une demande d'ami"
      operationId: "friendRequestReply"
      requestBody:
        description: "JSON contenant la structure User de l'ami et une variable accept"
        required: true
        content:
          json:
            schema:
              type: object
              properties:
                friend:
                  $ref: "#/components/schemas/User"
                accept:
                  type: boolean
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "Jean Dupont has been added to your friends."
                  status:
                    type: integer
                    example: 200
        "403":
          description: "Erreur"

  /histPosition:
    get:
      tags:
        - Position
      summary: "Renvoie l'historique des positions"
      operationId: "getHistPosition"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  hist_positions:
                    $ref: "#/components/schemas/Hist_position"
                  status:
                    type: integer
                    example: 200
        "403":
          description: "Erreur"

  /currPosition:
    get:
      tags:
        - Position
      summary: "Renvoie la position courante"
      operationId: "getCurrentPosition"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  position:
                    $ref: "#/components/schemas/Position"
                  status:
                    type: integer
                    example: 200
        "201":
          description: "Utilisateur introuvable"
          content:
            json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
        "403":
          description: "Erreur"

  /currFriendsPosition:
    get:
      tags:
        - Position
      summary: "Renvoie la position courrente d'un ami"
      operationId: "getFriendsCurrentPosition"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  friendsposition:
                    $ref: "#/components/schemas/Position"
                  status:
                    type: integer
                    example: 200
        "201":
          description: "Position indisponible, ou ami introuvable"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "no friends position are available"
                  status:
                    type: integer
                    example: 201
  /savePos:
    post:
      tags:
        - Position
      summary: "Sauvegarder une position"
      operationId: "addPosition"
      requestBody:
        description: "Structure User de l'utilisateur"
        required: true
        content:
          json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "Position added"
                  status:
                    type : integer
                    example: 200
        "403":
          description: "Erreur"
  /delPos:
    delete:
      tags:
        - Position
      summary: "Supprimer une position"
      operationId: "deletePosition"
      requestBody:
        description: "Structure User de l'utilisateur"
        required: true
        content:
          json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "element deleted"
                  status:
                    type: integer
                    example: 200
        "403":
          description: "Erreur"

  /Connect:
    post:
      tags:
        - Connexion
      summary: "Se connecter"
      operationId: "connectUser"
      requestBody:
        description: "Structure User de l'utilisateur"
        required: true
        content:
          json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "Opération réussie"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "connected"
                  token:
                    type: number
                    example: ""
                  status:
                    type: integer
                    example: 200
        "403":
          description: "Erreur de connexion"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "failed to connect"
        "401":
          description: "Utilisateur introuvable"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "user unknown"

  /isConnect:
    post:
      tags:
        - Connexion
      summary: "Vérifier l'état de connexion"
      operationId: "isConnect"
      responses:
        "200":
          description: "Token valide"
          content:
            json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                    example: "connected, token valid"
        "403":
          description: "Erreur de connexion"
          content:
            json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "token not valid"
